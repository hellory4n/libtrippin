--[[
-- samurai: Simple Ninja build script generator
-- https://github.com/hellory4n/libtrippin
--
-- Copyright (C) 2025 by hellory4n <hellory4n@gmail.com>
--
-- Permission to use, copy, modify, and/or distribute this
-- software for any purpose with or without fee is hereby
-- granted.
--
-- THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS
-- ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL
-- IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
-- EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
-- INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
-- WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
-- WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
-- TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE
-- USE OR PERFORMANCE OF THIS SOFTWARE.
]]

-- if you're wondering what all the funny ---@ things are,
-- they're annotations for the [lua lsp](https://github.com/LuaLS/lua-language-server)
-- mostly type annotations

---@class (exact) Project
---@field name string
---@field compiler string
---@field cflags string? - flags used during compilation
---@field ldflags string? - flags used during linking
---@field sources string[] - list of source files
---@field target string? - the final name of the executable
---@field pre_build fun(proj: Project)? - a function to run before building the project
---@field post_build fun(proj: Project)? - a function to run after building the project
local Project = {}

local sam = {
	version = "v0.1.0",

	---@type table<string, fun(val: string)>
	_options = {},
	---@type table<string, string>
	_option_descriptions = {},
	---@type Project?
	_project = nil,
}

-- the length operator doesn't work with tables due to some reason unbeknownst to man
local function table_len(table)
	local i = 0
	for _, _ in pairs(table) do
		i = i + 1
	end
	return i
end

--- Adds a command-line option, and calls the callback function if it's used.
---@param name string
---@param description string
---@param callback fun(val: string)
function sam.option(name, description, callback)
	sam._options[name] = callback
	sam._option_descriptions[name] = description
end

--- Makes sure nothing tragically fails trying to access a nil field
---@param project Project
function sam._project_defaults(project)
	if project == nil then
		error("Please set a project with 'sam.project()'")
	end

	-- required fields
	if project.name == nil or project.name == "" then
		error("Please give your project a name with the '.name' field.")
	end
	if project.compiler == nil or project.compiler == "" then
		error("Please give your project a compiler with the '.compiler' field.")
	end
	if project.sources == nil or #project.sources == 0 then
		error("Your project needs at least 1 source file. (see the '.sources' option)")
	end

	-- optional fields
	if project.target == nil or project.target == "" then
		project.target = project.name
	end
	if project.cflags == nil then
		project.cflags = ""
	end
	if project.ldflags == nil then
		project.ldflags = ""
	end
	if project.pre_build == nil then
		project.pre_build = function(_) end
	end
	if project.post_build == nil then
		project.post_build = function(_) end
	end
end

--- Makes a new project. Note that there can only be one project. See [Project](lua://Project) for
--- available options.
---@param project Project
function sam.project(project)
	sam._project_defaults(project)
	sam._project = project
end

--- Initializes the library
function sam.init()
	-- TODO
end

function sam._cmd_help()
	io.write("The samurai build system\n")
	io.write("usage: ./samurai.lua [command] [options...]\n")
	io.write("\n")
	-- you can't make custom commands, at least not yet
	io.write([[Commands:
    help: shows this
    configure: creates the ninja build script
    build: builds the project
    clean: removes all build files
    version: prints the samurai + lua version]]
	)
	io.write("\n")

	if table_len(sam._options) > 0 then
		-- mmm yes i love sorting oh yeah oughhh im sorting its all over hte screen
		local sorted_options = {}
		for option, _ in pairs(sam._option_descriptions) do
			table.insert(sorted_options, option)
		end
		table.sort(sorted_options)

		io.write("\nOptions: (usage: name=value)\n")
		for _, option in pairs(sorted_options) do
			io.write("    " .. option .. ": " .. sam._option_descriptions[option] .. "\n")
		end
	end
end

---@param proj Project
function sam._cmd_configure(proj)
	local f = io.open("build.ninja", "w")
	assert(f)

	f:write("# Autogenerated by samurai. You probably shouldn't edit this.\n")
	f:write("cc = " .. proj.compiler .. "\n")
	f:write("cflags = " .. proj.cflags .. "\n")
	f:write("ldflags = " .. proj.ldflags .. "\n")

	f:write("\nrule compile\n")
	f:write("  command = $cc $cflags -c $in -o $out\n")
	f:write("  description = Compiling $in\n")

	f:write("\nrule link\n")
	f:write("  command = $cc $in $ldflags -o $out\n")
	f:write("  description = Linking $out\n\n")

	for _, src in ipairs(proj.sources) do
		f:write("build build/obj/" .. (src .. ".o"):gsub("/", "_") ..
			": compile " .. src .. "\n"
		)
	end

	f:write("\nbuild build/bin/" .. proj.target .. ": link ")
	for _, src in ipairs(proj.sources) do
		f:write("build/obj/" .. (src .. ".o"):gsub("/", "_") .. " ")
	end

	f:write("\n\ndefault build/bin/" .. proj.target .. "\n")

	f:close()

	-- get the compile_commands.json
	assert(os.execute("ninja -t compdb > compile_commands.json"),
		"couldn't get compile_commands.json (likely a samurai bug)"
	)
end

---@param proj Project
function sam._cmd_build(proj)
	if io.open("build.ninja", "r") == nil then
		error("no build.ninja file found, please create one with the 'configure' command")
	end

	-- make sure the build dirs exist
	assert(os.execute("mkdir build/obj -p"))
	assert(os.execute("mkdir build/bin -p"))

	proj.pre_build(proj)

	assert(os.execute("ninja"), "build failed :(")

	proj.post_build(proj)

	io.write("build succeeded!")
end

function sam._cmd_clean()
	-- scary!
	assert(os.execute("rm -rf build/**"))
	assert(os.execute("rm -f build.ninja"))
	assert(os.execute("rm -f .ninja_log"))
end

function sam._cmd_version()
	io.write("samurai " .. sam.version .. ", using " .. _VERSION .. "\n")
end

--- Put this at the end of your build script to actually do anything
function sam.run()
	if sam._project == nil then
		error("Please set a project with 'sam.project()'")
	end

	local opts = {}

	for i, argma in ipairs(arg) do
		-- first arg is the command
		if i == 1 then
			goto continue
		end

		-- TODO this will probably break
		local key, val = argma:match("^([%w%-_]+)=?(%S*)$")
		if key == "" then key = nil end
		if val == "" then val = nil end

		if key and val then
			table.insert(opts, { key = key, val = val })
		else
			-- TODO this is a horrible error message
			error("expected value")
		end

		::continue::
	end

	for _, mate in ipairs(opts) do
		if sam._options[mate.key] ~= nil then
			sam._options[mate.key](mate.val)
		else
			warn("unknown option '" .. mate.key .. "'")
		end
	end

	-- arg[1] should be the command
	if arg[1] == "help" or arg[1] == "--help" or arg[1] == "-h" or arg[1] == nil then
		sam._cmd_help()
	elseif arg[1] == "configure" then
		sam._cmd_configure(sam._project)
	elseif arg[1] == "build" then
		sam._cmd_build(sam._project)
	elseif arg[1] == "clean" then
		sam._cmd_clean()
	elseif arg[1] == "version" or arg[1] == "--version" or arg[1] == "-v" then
		sam._cmd_version()
	else
		error("invalid command '" .. arg[1] .. "' (try 'help' to see available commands)")
	end
end

return sam
